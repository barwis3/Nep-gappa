// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model MenuItem {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String
  available   Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]

  @@map("menu_items")
}

model Order {
  id              String      @id @default(cuid())
  customerName    String
  customerEmail   String
  customerPhone   String
  eventType       String
  deliveryDate    String
  deliveryTime    String
  address         String
  peopleCount     Int
  community       String?
  parish          String?
  notes           String?
  status          String      @default("pending") // pending, accepted, in_progress, delivered, cancelled
  rejectionReason String?
  total           Float
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[]
  messages        Message[]
  rating          Rating?

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Float
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Message {
  id        String   @id @default(cuid())
  orderId   String
  content   String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Rating {
  id        String   @id @default(cuid())
  orderId   String   @unique
  rating    Int
  comment   String?
  response  String?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

model Availability {
  id    String @id @default(cuid())
  date  String @unique
  slots Json   // Array of available time slots

  @@map("availability")
}